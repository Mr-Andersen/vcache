cabal-version:      3.0
name: vcache
version: 0.2.6
synopsis: semi-transparent persistence for Haskell using LMDB, STM
category: Database
description:
  VCache provides a nearly-transparent persistent memory for Haskell
  supporting ACID transactional variables and large structured values.
  The virtual address space is modeled above a memory mapped file via
  LMDB, with structure sharing and incremental reference counting GC.
  .
  VCache was developed as an alternative to acid-state in a context where
  the persistent data is much bigger than the active working set and RAM.
  Other similar packages include TCache and perdure. See the home page 
  for a simple comparison.
  
author: David Barbour
maintainer: dmbarbour@gmail.com
homepage: http://github.com/dmbarbour/haskell-vcache

copyright: (c) 2014-2015 by David Barbour
license: BSD3
license-file: LICENSE
stability: experimental
build-type: Simple

extra-source-files:
    README.md 
    changelog.md

library
  hs-source-dirs: hsrc_lib
  default-language: Haskell2010
  default-extensions:
    , DerivingStrategies
  build-depends: base (>= 4.6 && < 5)
    , direct-murmur-hash
    , bytestring
    , transformers
    , containers (>= 0.5)
    , stm
    , lmdb (>= 0.2.5)
    , filelock
    , easy-file
    , random (>= 1.0)

  exposed-modules:
    Database.VCache
    Database.VCache.VRef
    Database.VCache.PVar
    Database.VCache.VTx
    Database.VCache.VCacheable
    Database.VCache.VPut
    Database.VCache.VGet

    Database.VCache.Path
    Database.VCache.Sync
    Database.VCache.Stats
    Database.VCache.Cache

  other-modules:
    Database.VCache.Types
    Database.VCache.Open
    Database.VCache.Aligned
    Database.VCache.RWLock
    Database.VCache.Hash
    Database.VCache.VGetAux
    Database.VCache.VGetInit
    Database.VCache.VPutAux
    Database.VCache.VPutFini
    -- Database.VCache.Adjacency
    Database.VCache.Alloc
    Database.VCache.Read
    Database.VCache.Write
    Database.VCache.Clean
    Database.VCache.Refct
   
  ghc-options: -Wall -auto-all
